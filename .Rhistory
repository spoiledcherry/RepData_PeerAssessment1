top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit9
submit()
submit()
View(result3)
print()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
getwd()
setwd(./data/UCI HAR Dataset)
getwd()
library("swirl")
install_from_swirl("Exploratory Data Analysis")
swirl()
data(cars)
0
swirl()
2
0
swirl（
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppnm)
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v= median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data = pollution, formula(pm25, region), col = "red"
boxplot(data = pollution, formula(pm25, region), col = "red")
boxplot(data = pollution, formula(pm25, region), col = "red")
boxplot(data = pollution, formula = pm25~region, col = "red")
boxplot(data = "pollution", formula(pm25, region), col = "red")
boxplot(formula(pollution, pm25~region), col = "red")
boxplot(formula(pm25~region, data = pollution), col = "red")
？formula
?formula
boxplot(formula(pollution, pm25~region), col = "red")
boxplot(pollution, pm25~region, col = "red")
boxplot(data = pollution, pm25~region, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution$region = "east")
east <- subset(pollution$region == "east")
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
？Device
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income | region, state, layout = c(4,1)
xyplot(Life.Exp~Income | region, state, layout = c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(qirquality$Ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
main="Ozone and Wind in New York City"
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality$Month="May")
may <- subset(airquality$Month=="May")
may <- subset(airquality, airquality$Month=="May")
may <- subset(airquality, airquality$Month=="May")
may <- subset(airquality, Month=="May")
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month !=5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17, 8), col = c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library("swirl")
swirl()
0
0
0
exists()
exit
swirl()
dim(ssd)
names(ssd[, 562:563])
table
table(ssd$subject)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
dist(sub1[, 1:3])
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1$[, 10:12])
mdist <- dist(sub1[, 10:12])
hclusting <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(merge(sub1[, 10:12], maxCon)
)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
KClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(x$y)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
strsplit(cnames, "|", fixed = TRUE)
names <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnmaes
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
boolean <- x1<0
negative <- x1<0
sum(negative, na.rm=T)
sum(negative, na.rm=TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(date[negative], "month")
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36, county.site == both)
cnt0 <- subset(pm0, State.Code == 36, county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site == both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63, Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline
abline(h= median(x0sub, na.rm = TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h= median(x1sub, na.rm = TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean=mn0)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[, 2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[,3]))
segments(rep(1, 52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x<mrg$mean.y, ]
setwd("~/Data/course5week2/RepData_PeerAssessment1")
activity  <- read.csv("activity.csv", sep = ";", header = T)
head(activity)
activity  <- read.csv("activity.csv", sep = ",", header = T)
head(activity)
str(activity)
activity$date <- as.Date(as.character(activity$date), "%Y%m%d")
str(activity)
head(activity)
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(activity$date, format = "%Y%m%d")
head(activity)
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(as.character(activity$date), format = "%Y%m%d")
head(activity)
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(as.character(activity$date), format = "%Y-%m-%d")
head(activity)
str(activity)
totalstep <- aggregate(steps~date, data = activity, FUN = sum)
hist(steps, activity)
hist(totalstep$steps, breaks = totalstep$date)
head(totalstep)
hist(totalstep$steps)
hist(totalstep$steps)
library(ggplot2)
g <- ggplot(totalstep, aes(x= date, y=steps))
g + geom_bar()
dim(totalstep)
g <- ggplot(totalstep, aes(x= factor(date), y=steps))
g + geom_bar()
hist(totalstep$steps)
hist(totalstep$steps, main = "Total Steps Taken Each Day", xlab = "Number of Steps", col = "black")
hist(totalstep$steps, main = "Total Steps Taken Each Day", xlab = "Number of Steps", col = "yellow")
meanstep <- mean(totalstep$steps)
medianstep <- median(totalstep$steps)
hist(totalstep$steps, binwidth = 1000, main = "Total Steps Taken Each Day", xlab = "Number of Steps", col = "yellow")
dailypattern <- aggregate(steps~interval, activity, FUN = mean)
dailypattern <- aggregate(steps~interval, activity, FUN = mean)
x <- ggplot(dailypattern, aes(x=interval, y=steps))
x + geom_line(type="l", col = "blue")
dailypattern[which.max(dailypattern$steps), 1]
table
table(activity$steps)
sum(is.na(activity$steps))
activity[is.na(activity$steps),1] <- meanstep <- mean(totalstep$steps)
head(activity)
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(as.character(activity$date), format = "%Y-%m-%d")
head(activity)
average <- aggregate(steps~date, data = activity, FUN = mean)
head(average)
average
activity[is.na(activity$steps),1] <- average[activity[is.na(activity$steps),2], 2]
head
head(activity)
activity
?impute
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(as.character(activity$date), format = "%Y-%m-%d")
activity$steps[is.na(activity$steps)] <- dailypattern[as.character(activity$date[is.na(activity$steps)])]
activity$steps[is.na(activity$steps)] <- dailypattern$steps[as.character(activity$date[is.na(activity$steps)])]
head(activity)
activity
sum(is.na(activity$steps))
dailypattern$steps[as.character(activity$date[is.na(activity$steps)])]
dailypattern
dailypattern$steps[as.character(activity$interval[is.na(activity$steps)])]
activity$interval[is.na(activity$steps)]
activity[is.na(activity$steps)]$interval
activity[is.na(activity$steps), ]$interval
is.na(activity$steps)
dim(is.na(activity$steps))
table(is.na(activity$steps))
activity[is.na(activity), ]
str(activity[is.na(activity), ])
x <- activity[is.na(activity$steps), ]
str(x)
dailypattern[dailypattern$interval==x$interval, ]$steps
x$interval
str(x$date)
str(x$interval)
dailypattern
y <- dailypattern[x$interval, ]$steps
str
str(y)
table(y)
sum(is.na(y))
str(dailypattern)
str(y)
y <- dailypattern[x$interval, ]
str(y)
str(activity)
for (i in 1:2304) {x[i,1] <- dailypattern[x[i,3]==dailypattern$interval, ]$steps}
x
activity
for (i in 1:2304) {}
for (i in 1:nrow(activity)) {if (is.na(activity[i,1])), activity[i,1] <- dailypattern[activity[i,3]==dailypattern$interval, ]$steps}
for (i in 1:nrow(activity)) {if (is.na(activity[i,1])) activity[i,1] <- dailypattern[activity[i,3]==dailypattern$interval, ]$steps}
head
head(activity)
sum(is.na(activity$steps))
fillactivity <- activity
fillactivity$w <- weekdays(fillactivity$date)
head(fillactivity)
for (i in 1:nrow(fillactivity))
{if (fillactivity$w == "Saturday"|fillactivity$w == "Sunday")
fillactivity$day <- weekend
}
for (i in 1:nrow(fillactivity))
{if (fillactivity$w == "Saturday"|fillactivity$w == "Sunday")
fillactivity$day <- "weekend"
else fillactivity$day <- "weekday"
}
warnings()
for (i in 1:nrow(fillactivity))
{if (fillactivity$w[i] == "Saturday"|fillactivity$w == "Sunday")
fillactivity$day[i] <- "weekend"
else fillactivity$day[i] <- "weekday"
}
head
head(fillactivity)
str(fillactivity)
weekday <- aggregate(steps~interval + day, fillactivity, FUN = mean)
head
head(weekday)
str(weekday)
library(lattice)
xyplot(steps~interval|day, data=weekday, type="l", xlab = "Interval", ylab= "Number of steps")
dev.copy(png, "plot4.png")
dev.off()
hist(totalstep$steps, main = "Total Steps Taken Each Day", xlab = "Number of Steps", col = "yellow")
dev.copy(png, "plot1.png")
dev.off()
ggplot(dailypattern, aes(x=interval, y=steps)) + geom_line(col = "blue")
dev.copy(png, "plot2.png")
dev.off()
hist(totalstep1$steps, main = "Total Steps Taken Each Day (with NA filled in)", xlab = "Number of Steps", col = "green")
totalstep1 <- aggregate(steps~date, data = fillactivity, FUN = sum)
hist(totalstep1$steps, main = "Total Steps Taken Each Day (with NA filled in)", xlab = "Number of Steps", col = "green")
dev.copy(png, "plot3.png")
dev.off()
library(knitr)
opts_chunk$set(echo = TRUE)
library(ggplot2)
library(lattice)
setwd("~/Data/course5week2/RepData_PeerAssessment1")
activity  <- read.csv("activity.csv", sep = ",", header = T)
activity$date <- as.Date(as.character(activity$date), format = "%Y-%m-%d")
totalstep <- aggregate(steps~date, data = activity, FUN = sum)
hist(totalstep$steps, main = "Total Steps Taken Each Day", xlab = "Number of Steps", col = "yellow")
meanstep <- mean(totalstep$steps)
medianstep <- median(totalstep$steps)
sum(is.na(activity$steps))
totalstep1 <- aggregate(steps~date, data = fillactivity, FUN = sum)
hist(totalstep1$steps, main = "Total Steps Taken Each Day (with NA filled in)", xlab = "Number of Steps", col = "green")
totalstep1 <- aggregate(steps~date, data = fillactivity, FUN = sum)
hist(totalstep1$steps, main = "Total Steps Taken Each Day (with NA filled in)", xlab = "Number of Steps", col = "green")
meanstep1 <- mean(totalstep1$steps)
medianstep1 <- median(totalstep1$steps)
print(medianstep1, meanstep1)
meanstep1 <- mean(totalstep1$steps)
medianstep1 <- median(totalstep1$steps)
print(medianstep1)
print(meanstep1)
meanstep <- mean(totalstep$steps)
medianstep <- median(totalstep$steps)
print(meanstep)
print(medianstep)
fillactivity$w <- weekdays(fillactivity$date)
for (i in 1:nrow(fillactivity))
{if (fillactivity[i, ]$w == "Saturday"|fillactivity[i, ]$w == "Sunday")
fillactivity[i, ]$day <- "weekend"
else fillactivity[i, ]$day <- "weekday"
}
fillactivity$w <- weekdays(fillactivity$date)
for (i in 1:nrow(fillactivity))
{if (fillactivity[i, ]$w == "Saturday"|fillactivity[i, ]$w == "Sunday")
fillactivity[i, ]$day <- "weekend"
else fillactivity[i, ]$day <- "weekday"
}
weekday <- aggregate(steps~interval + day, fillactivity, FUN = mean)
head(weekday)
head
head(fillactivity)
meanstep1 <- mean(totalstep1$steps)
medianstep1 <- median(totalstep1$steps)
print(medianstep1)
print(meanstep1)
knit("PA1_template.Rmd")
library(knitr)
knit("PA1_template.Rmd")
